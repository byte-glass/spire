% Footle flap ratio
% awkward.crow@gmail.com
% 12th January 2024

## Rabbits ...

The all too familiar Fibonacci series can be defined as follows.

```python
def fib(n):
    a = b = 1
    for _ in range(n - 1):
        a, b = b, a + b
    return a

[fib(i) for i in range(1, 6)]
```

We are interested in the pairs of consecutive terms, i.e.

```python
def g(x):
    return (x[1], x[0] + x[1])
```

And their ratios. A naive effort might look like the following.

```python
def h(x):
    return x[1] / x[0]

[h(g((1, 1))), h(g(g((1, 1)))), h(g(g(g((1, 1)))))]
```

This is way too clumsy!

## and functional ratios

Lets get functional.

```python
def scan(f, x0, n):
    x = x0
    u = []
    for _ in range(n):
        u.append(x)
        x = f(x)
    return u

sigma = scan(g, (1, 1), 6)
sigma
``` 

Now taking ratios of consecutive terms is an application of `map` away.

```python
p = list(map(h, scan(g, (1, 1), 13)))
p
```

To see how closely these terms come to satisfying the condition that defines the golden ratio, firstly let

```python
phi = p[-1]
```

and compare `phi` and  `1 / (phi - 1)`,

```python
(phi, 1 / (phi - 1))
```

There is not much between them.
